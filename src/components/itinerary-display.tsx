
"use client";

import { useState, useEffect } from "react";
import Image from "next/image";
import { getItinerary, getAdjustedItinerary } from "@/lib/actions";
import { useToast } from "@/hooks/use-toast";
import type {
  GenerateItineraryInput,
  GenerateItineraryOutput,
} from "@/lib/types";

import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Skeleton } from "@/components/ui/skeleton";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel";
import {
  ArrowLeft,
  Loader2,
  AlertTriangle,
  Wallet,
  Sparkles,
  CloudSun,
  Ticket,
} from "lucide-react";
import { BookingDialog } from "./booking-dialog";

type ItineraryDisplayProps = {
  params: GenerateItineraryInput;
  onBack: () => void;
};

const WeatherDisplay = () => (
  <div className="flex items-center gap-2 text-sm text-muted-foreground p-2 bg-muted rounded-lg">
    <CloudSun className="w-5 h-5 text-amber-500" />
    <span>24Â°C, Sunny</span>
    <span className="text-xs">(mock data)</span>
  </div>
);

// A simple parser to convert markdown bold to HTML strong tags
const parseMarkdown = (text: string) => {
    const boldPattern = /\*\*(.*?)\*\*/g;
    const html = text
        .replace(boldPattern, '<strong>$1</strong>')
        .replace(/\n/g, '<br />');
    return { __html: html };
}

export default function ItineraryDisplay({
  params,
  onBack,
}: ItineraryDisplayProps) {
  const [itinerary, setItinerary] = useState<GenerateItineraryOutput | null>(null);
  const [hasBeenAdjusted, setHasBeenAdjusted] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [isAdjusting, setIsAdjusting] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    async function fetchItinerary() {
      setIsLoading(true);
      try {
        const result = await getItinerary(params);
        setItinerary(result);
      } catch (error) {
        toast({
          variant: "destructive",
          title: "AI Error",
          description: (error as Error).message,
        });
        onBack();
      } finally {
        setIsLoading(false);
      }
    }
    fetchItinerary();
  }, [params, onBack, toast]);

  const handleAdjustBudget = async () => {
    if (!itinerary) return;
    setIsAdjusting(true);
    setHasBeenAdjusted(true); // Mark that an adjustment has been attempted
    try {
        const result = await getAdjustedItinerary({
            itinerary: itinerary.itinerary,
            budget: params.budget,
            currentCost: itinerary.totalPrice,
            destination: params.destinations,
            interests: params.interests,
            currency: params.currency,
        });
        // Replace the old itinerary with the new, adjusted one
        setItinerary(result);
        toast({
            title: "Itinerary Adjusted!",
            description: "We've found some cheaper options for you."
        })
    } catch (error) {
        toast({
            variant: "destructive",
            title: "Adjustment Failed",
            description: (error as Error).message,
        })
    } finally {
        setIsAdjusting(false);
    }
  }

  if (isLoading) {
    return (
      <Card className="w-full max-w-3xl">
        <CardHeader>
          <Skeleton className="h-8 w-3/4" />
          <Skeleton className="h-4 w-1/2" />
        </CardHeader>
        <CardContent className="space-y-4">
          <Skeleton className="h-48 w-full" />
          <Skeleton className="h-20 w-full mt-4" />
        </CardContent>
      </Card>
    );
  }

  if (!itinerary) {
    return (
      <Card className="w-full max-w-lg p-8 text-center">
        <CardTitle className="font-headline">Could Not Generate Itinerary</CardTitle>
        <CardDescription>The AI failed to create an itinerary. Please try again with different criteria.</CardDescription>
        <Button onClick={onBack} className="mt-6">
          <ArrowLeft className="mr-2 h-4 w-4" /> Go Back
        </Button>
      </Card>
    );
  }

  const budgetExceeded = itinerary.totalPrice > params.budget;
  const displayItinerary = itinerary.itinerary;
  const displayPrice = itinerary.totalPrice;
  const displayTime = itinerary.totalTime;

  const formattedPrice = new Intl.NumberFormat(undefined, {
    style: 'currency',
    currency: params.currency || 'USD',
    minimumFractionDigits: 0,
  }).format(displayPrice);

  return (
    <Card className="w-full max-w-3xl animate-in fade-in-50">
      <CardHeader>
        <div className="flex justify-between items-start">
          <div>
            <CardTitle className="font-headline text-3xl text-primary">
              Your Itinerary for {params.destinations}
            </CardTitle>
            <CardDescription>
              A personalized plan generated by NammaTripAI.
            </CardDescription>
          </div>
          <WeatherDisplay />
        </div>
      </CardHeader>
      <CardContent>
        {budgetExceeded && !hasBeenAdjusted && (
            <Alert variant="destructive" className="mb-6">
                <AlertTriangle className="h-4 w-4" />
                <AlertTitle>Budget Exceeded!</AlertTitle>
                <AlertDescription className="flex items-center justify-between">
                    <span>This plan costs {formattedPrice}, which is over your budget.</span>
                    <Button size="sm" onClick={handleAdjustBudget} disabled={isAdjusting}>
                        {isAdjusting ? <Loader2 className="h-4 w-4 animate-spin"/> : <Sparkles className="mr-2 h-4 w-4" />}
                        Find Cheaper Options
                    </Button>
                </AlertDescription>
            </Alert>
        )}
        {hasBeenAdjusted && !budgetExceeded && (
             <Alert className="mb-6 bg-green-50 border-green-200 dark:bg-green-950 dark:border-green-800">
                <Wallet className="h-4 w-4 text-green-600" />
                <AlertTitle className="text-green-800 dark:text-green-300">Itinerary Adjusted for Budget</AlertTitle>
                <AlertDescription className="text-green-700 dark:text-green-400">
                   We've successfully revised the plan to fit your budget!
                </AlertDescription>
            </Alert>
        )}

        {itinerary.places && itinerary.places.length > 0 && (
          <Carousel className="w-full mb-6">
            <CarouselContent>
              {itinerary.places.map((place, index) => (
                <CarouselItem key={index} className="md:basis-1/2 lg:basis-1/3">
                  <div className="p-1 h-full">
                    <Card className="flex flex-col h-full overflow-hidden">
                       <CardHeader className="p-0 relative h-40 w-full">
                        <Image
                          src={place.imageUrl || `https://picsum.photos/seed/${place.name}/600/400`}
                          alt={place.name}
                          fill
                          className="object-cover"
                          data-ai-hint={place.name}
                        />
                         <div className="absolute inset-x-0 bottom-0 p-2 bg-gradient-to-t from-black/80 to-transparent">
                            <h3 className="font-headline text-lg font-semibold text-white">{place.name}</h3>
                        </div>
                      </CardHeader>
                       <CardContent className="p-3 flex-grow">
                          <p className="text-sm text-muted-foreground">{place.description}</p>
                      </CardContent>
                      <CardFooter className="p-2 pt-0">
                         <BookingDialog 
                            placeName={place.name} 
                            trigger={<Button variant="secondary" className="w-full"><Ticket className="mr-2"/>Book Now</Button>} 
                        />
                      </CardFooter>
                    </Card>
                  </div>
                </CarouselItem>
              ))}
            </CarouselContent>
            <CarouselPrevious className="ml-12" />
            <CarouselNext className="mr-12"/>
          </Carousel>
        )}

        <div 
            className="prose prose-sm md:prose-base dark:prose-invert max-w-none rounded-md border bg-muted/50 p-4"
            dangerouslySetInnerHTML={parseMarkdown(displayItinerary)}
        />
      </CardContent>
      <CardFooter className="flex flex-col md:flex-row justify-between items-center gap-4">
        <div className="grid grid-cols-2 gap-4 text-center">
            <div className="p-2 rounded-lg bg-secondary">
                <div className="text-sm font-semibold text-muted-foreground">Total Price</div>
                <div className="font-headline text-xl font-bold text-primary">{formattedPrice}</div>
            </div>
             <div className="p-2 rounded-lg bg-secondary">
                <div className="text-sm font-semibold text-muted-foreground">Total Time</div>
                <div className="font-headline text-xl font-bold text-primary">{displayTime}</div>
            </div>
        </div>
        <div className="flex gap-2">
            <Button variant="outline" onClick={onBack}>
                <ArrowLeft className="mr-2 h-4 w-4" /> Start Over
            </Button>
             <BookingDialog 
                placeName="Entire Trip" 
                trigger={<Button><Ticket className="mr-2"/>Book Entire Trip</Button>} 
            />
        </div>
      </CardFooter>
    </Card>
  );
}
